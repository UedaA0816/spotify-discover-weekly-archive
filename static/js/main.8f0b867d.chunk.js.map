{"version":3,"sources":["spotifyapi.ts","store/user/user.ts","store/index.ts","components/SubButton.tsx","components/Header.tsx","components/Home.tsx","components/Welcome.tsx","components/Main.tsx","components/SpotifyCallback.tsx","components/RedirectRoot.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["clientId","process","REACT_APP_SPOTIFY_API_CLIENT_ID","clientSecret","REACT_APP_SPOTIFY_API_CLIENT_SECRET","redirect_uri","REACT_APP_SPOTIFY_API_REDIRECT_URI","parseRedirectSearchParams","searchParams","querystring","parse","parseSearchParams","requestAuthorization","state","length","text","possible","i","charAt","Math","floor","random","generateRandomString","redirectUrl","stringify","response_type","client_id","scope","getToken","code","data","encodeURIComponent","axios","post","Buffer","toString","getUser","access_token","get","LOCALSTORAGE_KEY_USER","initialState","isLogin","slice","createSlice","name","reducers","init","action","userState","localStorage","getItem","JSON","login","res","payload","setItem","logout","removeItem","actions","initUser","loginUser","logoutUser","reducer","combineReducers","user","userReducer","store","configureStore","useSelector","rawUseSelector","Subbutton","children","onClick","className","Header","dispatch","useDispatch","profile","display_name","uri","window","location","assign","Home","Welcome","Main","SpotifyCallback","useLocation","useState","isLoading","setIsLoading","redirect","setRedirect","useEffect","console","log","search","replace","error","then","token_res","refresh_token","user_res","accessToken","refreshToken","catch","to","RedirectRoot","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8f0b867d.chunk.js","sourcesContent":["import axios from 'axios';\nimport querystring from 'querystring'\nimport { SpotifyUserProfile } from './type/spotify/user';\n\nconst clientId = process.env.REACT_APP_SPOTIFY_API_CLIENT_ID || \"\"\nconst clientSecret = process.env.REACT_APP_SPOTIFY_API_CLIENT_SECRET || \"\"\nconst redirect_uri = process.env.REACT_APP_SPOTIFY_API_REDIRECT_URI || \"\"\n\nconst generateRandomString = function(length:number) {\n  let text = '';\n  const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  for (var i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n};\n\nconst parseSearchParams = (searchParams:string) => {\n  const querys = querystring.parse(searchParams)\n  // console.log(querys)\n  return querys\n}\n\nexport const parseRedirectSearchParams = (searchParams:string):{code:string,state:string} => parseSearchParams(searchParams) as any\n\nexport const requestAuthorization = () => {\n  const scopes = ['user-read-private', 'user-read-email'],\n        state = generateRandomString(16);\n  const redirectUrl = 'https://accounts.spotify.com/authorize?' +\n    querystring.stringify({\n      response_type: 'code',\n      client_id: clientId,\n      scope: scopes,\n      redirect_uri: redirect_uri,\n      state: state\n    });\n  return {redirectUrl,state}\n}\n\ntype GetTokenResponse = {access_token:string,refresh_token:string}\n\nexport const getToken = (code:string)=>{\n  \n  const data = `grant_type=authorization_code&code=${code}&redirect_uri=${encodeURIComponent(redirect_uri)}`\n  return axios.post<GetTokenResponse>(\"https://accounts.spotify.com/api/token\",data,{\n    \"headers\":{\n      \"Authorization\":`Basic ${new Buffer(`${clientId}:${clientSecret}`).toString('base64')}`,\n      'Content-Type':'application/x-www-form-urlencoded'\n    },\n    \"responseType\":\"json\",\n  })\n}\n\ntype GetUserResponse = SpotifyUserProfile\n\nexport const getUser = (access_token:string)=>{\n  return axios.get<GetUserResponse>(\"https://accounts.spotify.com/v1/me\",{\"headers\":{\"Authorization\":`Basic ${access_token}`},\"responseType\":\"json\"})\n}\n\n","import { CaseReducer, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { SpotifyUserProfile } from \"../../type/spotify/user\";\n\n\nexport type User = {\n  profile?:SpotifyUserProfile,\n  accessToken?:string,\n  refreshToken?:string,\n  isLogin:boolean\n}\nconst LOCALSTORAGE_KEY_USER = \"user\"\n\n// Stateの初期状態\nconst initialState:User = {\n  isLogin:false\n};\nconst init: CaseReducer<User, PayloadAction> = (state, action) => {\n  const userState = localStorage.getItem(LOCALSTORAGE_KEY_USER)\n  if(userState == null) return initialState\n  const json = JSON.parse(userState)\n  return json\n}\nconst login: CaseReducer<User, PayloadAction<User>> = (state, action) => {\n  const res = action.payload\n  localStorage.setItem(LOCALSTORAGE_KEY_USER,JSON.stringify(res))\n  return res\n}\nconst logout: CaseReducer<User, PayloadAction> = (state, action) => {\n  localStorage.removeItem(LOCALSTORAGE_KEY_USER)\n  return initialState\n}\n\n// Sliceを生成する\nconst slice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    init,\n    login,\n    logout,\n  }\n});\n\n// Reducerをエクスポートする\nexport default slice.reducer;\n\n// Action Creatorsをエクスポートする\nexport const { init:initUser, login:loginUser, logout:logoutUser } = slice.actions;","import { combineReducers } from \"redux\";\nimport { configureStore } from \"@reduxjs/toolkit\";\n\n\n// それぞれ slice.reducer を default export している前提\nimport userReducer from \"./user/user\";\nimport { TypedUseSelectorHook, useSelector as rawUseSelector, } from \"react-redux\";\n\nconst reducer = combineReducers({\n  user: userReducer,\n});\n\nconst store = configureStore({ reducer });\n\nexport default store\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n\nexport const useSelector: TypedUseSelectorHook<RootState> = rawUseSelector;","import React from \"react\";\n\nconst Subbutton:React.FC<{onClick:()=>void}> = ({children,onClick})=>{\n  \n  return(\n    <button className=\" box-border border-2 border-spotify border-solid rounded-full p-1.5 px-4 font-semibold text-sm\" onClick={onClick}>{children}</button>\n  )\n}\n\nexport default Subbutton\n","import { useDispatch } from \"react-redux\";\nimport { useSelector } from \"../store\";\n\nimport { logoutUser } from \"../store/user/user\";\nimport { requestAuthorization } from \"../spotifyapi\";\n\nimport Subbutton from \"./SubButton\";\n\n\nfunction Header(){\n  const dispatch = useDispatch()\n  const {isLogin,profile}  = useSelector(state => state.user);\n  const login = () => {\n    const {redirectUrl:uri,state} = requestAuthorization()\n    localStorage.setItem(\"authorizeState\",state)\n    window.location.assign(uri)\n  }\n  const logout = () => {\n    dispatch(logoutUser())\n  }\n  return(\n    <header className=\" flex items-center border-b border-gray-600 h-14 p-2\">\n      <div className=\"flex-grow text-lg font-bold whitespace-nowrap overflow-scroll\">\n        Spotify Discover Weekly Archive \n        {isLogin && <span className=\"ml-4\">ID:{profile?.display_name}</span>}\n      </div>\n      <div className=\"flex-shrink-0\">\n        { isLogin ? <Subbutton onClick={logout}>LOG OUT</Subbutton> : <Subbutton onClick={login}>LOG IN</Subbutton>}\n      </div>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react';\n\nfunction Home() {\n   \n  return (\n    <div>\n      home\n    </div>\n  );\n}\n\nexport default  Home","import React from 'react';\n\nfunction Welcome() {\n  \n  \n  return (\n    <div>\n      welcome\n    </div>\n  );\n}\n\nexport default  Welcome","import React from 'react';\nimport { useSelector } from '../store/';\n\nimport Header from './Header';\nimport Home from './Home';\nimport Welcome from './Welcome';\n\nfunction Main() {\n  \n  const {isLogin}  = useSelector(state => state.user);\n  \n  return (\n    <div className=\"h-screen flex flex-col\">\n      <Header />\n      <div className=\"flex-grow p-8\">\n        {isLogin ? <Home /> : <Welcome/>}\n      </div>\n    </div>\n  );\n}\n\nexport default  Main","import React,{useState,useEffect} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect, useLocation } from \"react-router-dom\";\n\n\nimport { loginUser, User } from '../store/user/user'\nimport { getToken, getUser, parseRedirectSearchParams } from '../spotifyapi';\n\n\nfunction SpotifyCallback(){\n  const location = useLocation()\n  const dispatch = useDispatch()\n  const [isLoading,setIsLoading] = useState(true)\n  const [redirect,setRedirect] = useState(\"\")\n\n  useEffect(()=>{\n\n    console.log(location)\n    setRedirect(location.search)\n    const {state,code} = parseRedirectSearchParams(location.search.replace(\"?\",\"\"))\n    const currentState = localStorage.getItem(\"authorizeState\")\n    if(state !== currentState){\n      console.error(\"state_mismatch\")\n      setIsLoading(false)\n    }else{\n      console.log(\"state_match\")\n      localStorage.removeItem(\"authorizeState\")\n\n      getToken(code).then((token_res)=>{\n        const {access_token , refresh_token} = token_res.data\n\n        return getUser(access_token).then((user_res)=>{\n          const profile = user_res.data\n          const user:User = {\n            profile,\n            accessToken:access_token,\n            refreshToken:refresh_token,\n            isLogin:true\n          }\n          setIsLoading(false)\n          dispatch(loginUser(user))\n        })\n\n      }).catch((error)=>{\n        console.error(error)\n        setIsLoading(false)\n      })\n      \n    }\n\n    return ()=>{\n\n    }\n  },[ dispatch, location, setIsLoading])\n  return isLoading ? <div>{redirect}</div>: <Redirect to=\"/\" />\n}\n\nexport default SpotifyCallback","import { Redirect } from \"react-router\"\n\nfunction RedirectRoot(){\n  return <Redirect to=\"/\" />\n}\n\nexport default RedirectRoot","import React,{useEffect} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport { initUser } from './store/user/user'\n\nimport Main from './components/Main';\nimport SpotifyCallback from './components/SpotifyCallback';\nimport RedirectRoot from './components/RedirectRoot';\n\nfunction App() {\n  const dispatch = useDispatch()\n  useEffect(()=>{\n    dispatch(initUser())\n  },[dispatch])\n  return (\n    <div className=\"bg-gray-900 text-white h-screen\">\n\n      <BrowserRouter>\n\n        <Switch>\n\n          <Route exact path=\"/\" component={Main} />\n          <Route exact path=\"/authorize\" component={SpotifyCallback} />\n          <Route component={RedirectRoot}/>\n\n        </Switch>\n\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store/index';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}